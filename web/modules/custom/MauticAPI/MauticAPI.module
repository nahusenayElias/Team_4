<?php
/* 
function MauticAPI_schema() {
    \Drupal::database()->schema()->dropTable('MauticAPI.settings');
  return [
    'MauticAPI.settings' => [
      'fields' => [
        'mautic_url' => ['type' => 'text', 'size' => 'medium'],
        'mautic_username' => ['type' => 'text', 'size' => 'medium'],
        'mautic_password' => ['type' => 'text', 'size' => 'medium'],
        'allowed_values' => ['type' => 'text', 'size' => 'medium'],
      ],
    ],
  ];
} */

function MauticAPI_field_storage_config_info() {
  return [
    'field_name' => 'mautic_segment',
    'type' => 'list_string',
    'settings' => [
      'allowed_values' => MauticAPI_fetch_mautic_segments(), 
    ],
  ];
}

function MauticAPI_install() {
  $field_storage = \Drupal\field\Entity\FieldStorageConfig::create([
    'field_name' => 'field_mautic_user_segment',
    'entity_type' => 'node',
    'type' => 'list_string',
    'settings' => [
      'allowed_values' => MauticAPI_fetch_mautic_segments(), 
    ],
  ]);
  $field_storage->save();

  $field = \Drupal\field\Entity\FieldConfig::create([
    'field_name' => 'field_mautic_user_segment',
    'entity_type' => 'node',
    'bundle' => 'article',  // Change 'article' to the content type you want.
    'label' => 'Mautic Segment',
  ]);
  $field->save();
}

function MauticAPI_fetch_mautic_segments() {
  $segments = MauticAPI_get_mautic_segments();
  if ($segments) {
    return [
      '#theme' => 'item_list', 
      'items' => $segments,
    ];
  }
  else {
    return 'No segments found.';
  }
}

function MauticAPI_get_mautic_segments() {
  
        $username = 'admin';
        $api_key = '+Nimda666+';  
        $mautic_url = 'http://appserver.mauticapp.internal';
        $auth = base64_encode($username . ':' . $api_key);
        $client = \Drupal::httpClient();
    
        try {
          $response = $client->get($mautic_url . '/api/segments', [
            'headers' => [
              'Authorization' => 'Basic ' . $auth,
            ],
            'verify' => FALSE,
          ]);

          if ($response->getStatusCode() !== 200) {
            \Drupal::logger('mymodule')->error('Failed to fetch segments from Mautic. Status code: @status', ['@status' => $response->getStatusCode()]);
            return [];
          }
    
          $data = json_decode($response->getBody()->getContents(), TRUE);
    
          if (isset($data['lists'])) {
            $segments = $data['lists'];
            \Drupal::state()->set('MauticAPI.mautic_segments', $segments);
            foreach($segments as $segment) {
              $segment[] = $segment['name'];
            }
            return $segments;
          }
          else {
            \Drupal::logger('MauticAPI')->error('Mautic segments not found in the API response.');
            return [];
          }
        }
  catch (\Exception $e) {
    \Drupal::logger('MauticAPI')->error('Failed to fetch Mautic segments: ' . $e->getMessage());
    return [];
  }
}

function MauticAPI_form_node_article_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form['field_mautic_segment'])) {
    $segments = MauticAPI_fetch_mautic_segments();
    $form['field_mautic_segment']['widget'][0]['#options'] = $segments;
  }
}


function MauticAPI_form_node_article_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
 
  $segments = MauticAPI_get_mautic_segments();

  if ($segments) {
    $form['field_mautic_segments'] = [
      '#type' => 'select',
      '#title' => 'Select Mautic Segments',
      '#options' => array_combine($segments, $segments),
      '#multiple' => TRUE,
      '#default_value' => [],
    ];
  }
}

function MauticAPI_is_user_in_segment($email, $segments) {
  $client = \Drupal::httpClient();
  $api_url = 'http://appserver.mauticapp.internal/api/contacts/exists';
  $username = 'admin';
  $pw = '+Nimda666+';
  $auth = base64_encode($username.':'.$pw);

  $response = $client->get($api_url, [
    'query' => ['email' => $email],
    'headers' => ['Authorization' => 'Basic ' . $auth,
    ]
  ]);
  
  $data = json_decode($response->getBody()->getContents(), TRUE);
  $user_segments = $data['contact']['segments'];

  foreach ($segments as $segment) {
    if (in_array($segment, $user_segments)) {
      return TRUE;
    }
  }

  return FALSE;
}

